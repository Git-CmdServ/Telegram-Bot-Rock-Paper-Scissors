# –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—ë –¥–µ—Ä—å–º–æ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –Ω–µ –∏—Å–∫–∞—Ç—å –∫–æ—Å—è–∫–∏ –ø–æ –≤—Å–µ–º—É –∫–æ–¥—É
import logging  

# –ß—Ç–æ–±—ã –±–æ—Ç –∫–∏–¥–∞–ª —Ö–æ–¥—ã –Ω–µ –∫–∞–∫ —Ç—É–ø–æ–π, –∞ —Ä–∞–Ω–¥–æ–º–Ω–æ
import random   

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω—â–∏–Ω–∞, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ —Ç–æ—Ä–º–æ–∑–∏–ª, –∫–∞–∫ —Ç–≤–æ–π –±—ã–≤—à–∏–π
import asyncio  

# –ê–π–æ–≥—Ä–∞–º ‚Äî –∫–æ—Ä–æ–ª—å —Å—Ä–µ–¥–∏ –ª–∏–± –¥–ª—è –¢–µ–ª–µ–≥–∏, –±–µ—Ä—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
from aiogram import Bot, Dispatcher  

# –í—Å—è–∫–∏–µ —à—Ç—É–∫–∏ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –¢–µ–ª–µ–≥—Ä–∞–º–æ–º: —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–Ω–æ–ø–æ—á–∫–∏ –∏ –∫–æ–ª–ª–±—ç–∫–∏
from aiogram.types import (
    Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
)

# –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–≥–¥–∞ —é–∑–µ—Ä –ø–∏—à–µ—Ç "/start"
from aiogram.filters import Command  

# –§–∏–ª—å—Ç—Ä –¥–ª—è –∫–æ–ª–ª–±—ç–∫–æ–≤, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫–∞–∫—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª–∏
from aiogram import F  

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏, –∫–æ–≥–¥–∞ –±–æ—Ç —Ç—É–ø–∏—Ç
logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –¥–ª—è –≤—Ö–æ–¥–∞ –±–æ—Ç–∞, —Ö—Ä–∞–Ω–∏ –µ–≥–æ –≤ —Å–µ–∫—Ä–µ—Ç–µ, –∞ —Ç–æ —Å–æ–ø—Ä—É—Ç, –∫–∞–∫ —Ç–≤–æ—é –±—ã–≤—à—É—é
tok = '–¢–æ–∫–µ–Ω'

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä ‚Äî —ç—Ç–æ –º–æ–∑–≥–∏ –∏ —Ä—É–∫–∏ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
bot = Bot(token=tok)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–ª—è –∏–≥—Ä—ã, —á—Ç–æ–±—ã –Ω–µ –∏–≥—Ä–∞—Ç—å –≤ –ø—É—Å—Ç–æ—Ç—É
opts = {
    'rock': '‚úä –ö–∞–º–µ–Ω—å',
    'paper': '‚úã –ë—É–º–∞–≥–∞',
    'scissors': '‚úåÔ∏è –ù–æ–∂–Ω–∏—Ü—ã'
}

# –≠–º–æ–¥–∑–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –±–µ–∑ –Ω–∏—Ö –±—ã–ª–æ –±—ã —Å–∫—É—á–Ω–æ, –∫–∞–∫ –Ω–∞ —Å–∫—É—á–Ω–æ–π –ø–∞—Ä–µ
emj = {
    'rock': '‚úä',
    'paper': '‚úã',
    'scissors': '‚úåÔ∏è'
}

# –õ–æ–≥–∏–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è ‚Äî —á—Ç–æ —á–µ–º –¥—É–±–∞—Å–∏—Ç, –∫–∞–º–µ–Ω—å —Ä–µ–∂–µ—Ç –Ω–æ–∂–Ω–∏—Ü—ã, –∞ –±—É–º–∞–≥–∞ –Ω–∞–∫—Ä—ã–≤–∞–µ—Ç –∫–∞–º–µ–Ω—å
wins = {
    'rock': 'scissors',
    'paper': 'rock',
    'scissors': 'paper'
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ—á–µ–∫, —á—Ç–æ–±—ã —é–∑–µ—Ä –º–æ–≥ —Ç—ã–∫–Ω—É—Ç—å, –∞ –Ω–µ –ø–∏—Å–∞—Ç—å –≤—Ä—É—á–Ω—É—é
def mk_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=opts['rock'], callback_data='rock'),
            InlineKeyboardButton(text=opts['paper'], callback_data='paper'),
            InlineKeyboardButton(text=opts['scissors'], callback_data='scissors')
        ]
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ‚Äî –±–æ—Ç –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ç, –∞ —à–ª–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message(Command(commands=['start']))
async def start_cmd(msg: Message):
    txt = f"–ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name}! üéÆ\n–î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –≤ –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ ‚¨áÔ∏è"
    await msg.answer(txt, reply_markup=mk_kb())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help ‚Äî —Ç–∏–ø–∞, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Ç—É–ø–∏—Ç, –±–æ—Ç –æ–±—ä—è—Å–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞
@dp.message(Command(commands=['help']))
async def help_cmd(msg: Message):
    txt = "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É! üïπÔ∏è"
    await msg.answer(txt, reply_markup=mk_kb())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —é–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ ‚Äî —Ç—É—Ç —Ä–µ—à–∞–µ—Ç—Å—è, –∫—Ç–æ –∫–æ–≥–æ —É–¥–µ–ª–∞–ª
@dp.callback_query(F.data.in_({'rock', 'paper', 'scissors'}))
async def handle_cb(cb: CallbackQuery):
    await cb.answer()  # –ß—Ç–æ–±—ã –¢–µ–ª–µ–≥–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —á–∞—Å–∏–∫–∏ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞

    # –Æ–∑–µ—Ä —Ç—ã–∫–Ω—É–ª –∏ –≤—ã–±—Ä–∞–ª —Ö–æ–¥, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    u_ch = cb.data  

    # –ê —Ç–µ–ø–µ—Ä—å –±–æ—Ç –≤—ã–±–∏—Ä–∞–µ—Ç —Å–≤–æ–π —Ö–æ–¥ ‚Äî –∏ –¥–∞, –æ–Ω –¥–µ–ª–∞–µ—Ç —ç—Ç–æ —Å–ª—É—á–∞–π–Ω–æ
    b_ch = random.choice(list(opts.keys()))

    # –õ–æ–≥–∏–∫–∞: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—ã–±–æ—Ä—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if u_ch == b_ch:
        outcome = "–ù–∏—á—å—è! ü§ù"  # –ï—Å–ª–∏ –æ–±–∞ –≤—ã–±—Ä–∞–ª–∏ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ
    elif wins[u_ch] == b_ch:
        outcome = "–¢—ã –≤—ã–∏–≥—Ä–∞–ª! üéâ"  # –ï—Å–ª–∏ —é–∑–µ—Ä –ø–µ—Ä–µ–∏–≥—Ä–∞–ª –±–æ—Ç–∞
    else:
        outcome = "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! üòû"  # –ï—Å–ª–∏ –±–æ—Ç —É–Ω–∏–∑–∏–ª —é–∑–µ—Ä–∞

    # –≠–º–æ–¥–∑–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
    u_emj = emj[u_ch]
    b_emj = emj[b_ch]

    # –°–æ–±–∏—Ä–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    summary = (
        f"ü§ñ–¢—ã –≤—ã–±—Ä–∞–ª: {opts[u_ch]} {u_emj}\n"
        f"üòé–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {opts[b_ch]} {b_emj}\n\n"
        f"{outcome}"
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –¥—Ä–∞–º–∞—Ç–∏—á–Ω–æ—Å—Ç–∏
    await cb.message.answer(u_emj)
    await asyncio.sleep(0.5)
    await cb.message.answer(b_emj)
    await asyncio.sleep(0.5)
    await cb.message.answer(summary, reply_markup=mk_kb())

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ‚Äî –±–æ—Ç –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —á–∞—Ç
async def main():
    try:
        log.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")  # –°–æ–æ–±—â–∞–µ–º –≤ –∫–æ–Ω—Å–æ–ª–∏, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω
        await dp.start_polling(bot)  # –í–∫–ª—é—á–∞–µ–º –≤–µ—á–Ω—ã–π –æ–ø—Ä–æ—Å —Å–æ–±—ã—Ç–∏–π –∏–∑ –¢–µ–ª–µ–≥–∏
    finally:
        await bot.close()  # –ï—Å–ª–∏ –±–æ—Ç —É–º–∏—Ä–∞–µ—Ç, –æ–Ω –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        log.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")  # –ò –ø–∏—à–µ—Ç –≤ –ª–æ–≥–∏, —á—Ç–æ –æ–Ω —Å–¥–æ—Ö

# –ú–∞–≥–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å—ë —ç—Ç–æ –±–µ–∑—É–º–∏–µ
if __name__ == '__main__':
    asyncio.run(main())  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main()
